Index: xbmc-11.0~git20111203.5325bbc/live-scripts/diskmounter
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ xbmc-11.0~git20111203.5325bbc/live-scripts/diskmounter	2011-12-03 16:18:03.693405665 +0100
@@ -0,0 +1,164 @@
+#!/bin/bash
+####################
+# This utility searches for available HFS+, NTFS and FAT32 partitions, creates
+# mount points for them and mounts the partitions
+#
+# (c)2008 Luigi Capriotti <l.capriotti@xbmc.org> for use in XBMCLive
+# Base on "diskmount" by Dennis Kaarsemaker <dennis@ubuntu-nl.org>
+#
+# This program is free software; you can redistribute it and/or
+# modify it under the terms of the GNU General Public License
+# as published by the Free Software Foundation; either version 2
+# of the License, or (at your option) any later version.
+
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+###################
+
+VERBOSE='n'
+
+# Root check
+if [[ $UID != 0 ]]; then
+    echo 'You should run this program as root or using sudo'
+    exit 1
+fi
+
+OPTIONS='user,fmask=0133,dmask=0022,uid=1000,gid=1000'
+MACOPTIONS='user,file_umask=0133,dir_umask=0022,uid=1000,gid=1000'
+EXTOPTIONS=''
+
+# Now for the real work
+drivesntfs=`fdisk -l | grep -i 'ntfs' | awk -F '/| ' '{print $3}'`
+drivesfat=`fdisk -l | grep -i 'fat32' | awk -F '/| ' '{print $3}'`
+driveshfs=`fdisk -l | grep -i 'Apple_HFS' | awk -F '/| ' '{print $3}'`
+drivesext=`fdisk -l | grep -i 'Linux' | grep -v 'swap' | awk -F '/| ' '{print $3}'`
+
+if [ ! -d /media ]; then
+    mkdir /media
+fi
+
+donesomething='n'
+for drive in $drivesntfs; do
+    if [[ ! `grep $drive /etc/fstab` && ! `pmount | grep $drive` && ! `mount | grep $drive` ]]; then
+        if [ -e /sys/block/${drive%?}/removable ]; then
+            if [ "$(cat /sys/block/${drive%?}/removable)" = "0" ]; then
+		uuid=`blkid -o udev /dev/$drive | grep UUID= | cut -d"=" -f2`
+		if [ ! -d /media/$uuid ] ; then
+	                mkdir /media/$uuid
+		fi
+                mount -t ntfs -o rw,$OPTIONS /dev/$drive /media/$uuid
+
+                donesomething='y'
+                if [[ $VERBOSE == 'y' ]]; then
+                    echo "Mounted /dev/$drive as '/media/$uuid' (read-only)"
+                fi
+            else
+                if [[ $VERBOSE == 'y' ]]; then
+                    echo "Ignoring /dev/$drive - removable drive"
+                fi
+            fi
+        fi
+    else
+        if [[ $VERBOSE == 'y' ]]; then
+            echo "Ignoring /dev/$drive - already in /etc/fstab or mounted"
+        fi
+    fi
+done
+
+for drive in $drivesfat; do
+    if [[ ! `grep $drive /etc/fstab` && ! `pmount | grep $drive` && ! `mount | grep $drive` ]]; then
+	uuid=`blkid /dev/$drive | awk 'BEGIN{RS="UUID="}/-/{gsub(/ .*/,"");print}' | sed s/'"'/''/g`
+        if [ -e /sys/block/${drive%?}/removable ]; then
+            if [ "$(cat /sys/block/${drive%?}/removable)" = "0" ]; then
+		uuid=`blkid -o udev /dev/$drive | grep UUID= | cut -d"=" -f2`
+		if [ ! -d /media/$uuid ] ; then
+	                mkdir /media/$uuid
+		fi
+                mount -t vfat -o rw,$OPTIONS /dev/$drive /media/$uuid
+
+                donesomething='y'
+                if [[ $VERBOSE == 'y' ]]; then
+                    echo "Mounted /dev/$drive as '/media/$uuid' (read-only)"
+                fi
+            else
+                if [[ $VERBOSE == 'y' ]]; then
+                    echo "Ignoring /dev/$drive - removable drive"
+                fi
+            fi
+        fi
+    else
+        if [[ $VERBOSE == 'y' ]]; then
+            echo "Ignoring /dev/$drive - already in /etc/fstab or mounted"
+        fi
+    fi
+done
+
+
+for drive in $driveshfs; do
+    if [[ ! `grep $drive /etc/fstab` && ! `pmount | grep $drive` && ! `mount | grep $drive` ]]; then
+        if [ -e /sys/block/${drive%?}/removable ]; then
+            if [ "$(cat /sys/block/${drive%?}/removable)" = "0" ]; then
+		uuid=`blkid -o udev /dev/$drive | grep UUID= | cut -d"=" -f2`
+		if [ ! -d /media/$uuid ] ; then
+	                mkdir /media/$uuid
+		fi
+                mount -t hfsplus -o rw,$MACOPTIONS /dev/$drive /media/$uuid
+
+                donesomething='y'
+                if [[ $VERBOSE == 'y' ]]; then
+                    echo "Mounted /dev/$drive as '/media/$uuid' (read-only)"
+                fi
+            else
+                if [[ $VERBOSE == 'y' ]]; then
+                    echo "Ignoring /dev/$drive - removable drive"
+                fi
+            fi
+        fi
+    else
+        if [[ $VERBOSE == 'y' ]]; then
+            echo "Ignoring /dev/$drive - already in /etc/fstab or mounted"
+        fi
+    fi
+done
+
+for drive in $drivesext; do
+    if [[ ! `grep $drive /etc/fstab` && ! `pmount | grep $drive` && ! `mount | grep $drive` ]]; then
+        if [ -e /sys/block/${drive%?}/removable ]; then
+            if [ "$(cat /sys/block/${drive%?}/removable)" = "0" ]; then
+		uuid=`blkid -o udev /dev/$drive | grep UUID= | cut -d"=" -f2`
+		if [ ! -d /media/$uuid ] ; then
+	                mkdir /media/$uuid
+		fi
+                mount -o rw,$EXTOPTIONS /dev/$drive /media/$uuid
+
+                donesomething='y'
+                if [[ $VERBOSE == 'y' ]]; then
+                    echo "Mounted /dev/$drive as '/media/$uuid' (read-only)"
+                fi
+            else
+                if [[ $VERBOSE == 'y' ]]; then
+                    echo "Ignoring /dev/$drive - removable drive"
+                fi
+            fi
+        fi
+    else
+        if [[ $VERBOSE == 'y' ]]; then
+            echo "Ignoring /dev/$drive - already in /etc/fstab or mounted"
+        fi
+    fi
+done
+
+if [[ $VERBOSE == 'y' ]]; then
+    if [[ $donesomething == 'y' ]]; then
+       echo "All Linux, Windows and Mac partitions on non-removable disks have been mounted"
+    else
+       echo "No usable Linux, Windows or Mac partitions found on non-removable disks"
+    fi
+fi
+
Index: xbmc-11.0~git20111203.5325bbc/live-scripts/live.d/01-configureXorg.sh
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ xbmc-11.0~git20111203.5325bbc/live-scripts/live.d/01-configureXorg.sh	2011-12-03 16:18:03.693405665 +0100
@@ -0,0 +1,94 @@
+#!/bin/bash
+
+#      Copyright (C) 2005-2008 Team XBMC
+#      http://www.xbmc.org
+#
+#  This Program is free software; you can redistribute it and/or modify
+#  it under the terms of the GNU General Public License as published by
+#  the Free Software Foundation; either version 2, or (at your option)
+#  any later version.
+#
+#  This Program is distributed in the hope that it will be useful,
+#  but WITHOUT ANY WARRANTY; without even the implied warranty of
+#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+#  GNU General Public License for more details.
+#
+#  You should have received a copy of the GNU General Public License
+#  along with XBMC; see the file COPYING.  If not, write to
+#  the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
+#  http://www.gnu.org/copyleft/gpl.html
+ 
+kernelParams=$(cat /proc/cmdline)
+subString=${kernelParams##*xbmc=}
+xbmcParams=${subString%% *}
+
+activationToken="nogenxconf"
+
+# if strings are NOT the same the token is part of the parameters list
+# here we want to stop script if the token is there
+if [ "$xbmcParams" != "${xbmcParams%$activationToken*}" ] ; then
+	exit 0
+fi
+
+# Generates valid xorg.conf for proprietary drivers if missing
+if [ -e /etc/X11/xorg.conf ] ; then
+	exit 0
+fi
+
+# Identify Ubuntu release
+LSBRELEASE="$(lsb_release -r | cut -f2 | sed 's/\.//')"
+
+# Identify GPU, Intel by default
+GPUTYPE="INTEL"
+
+GPU=$(lspci -nn | grep 0300)
+# 10de == NVIDIA
+if [ "$(echo $GPU | grep 10de)" ]; then
+	GPUTYPE="NVIDIA"
+else
+	# 1002 == AMD
+	if [ "$(echo $GPU | grep 1002)" ]; then
+		GPUTYPE="AMD"
+	fi
+fi
+
+if [ "$GPUTYPE" = "NVIDIA" ]; then
+	if [ $LSBRELEASE -gt 910 ]; then
+		# only on lucid!
+		update-alternatives --set gl_conf /usr/lib/nvidia-current/ld.so.conf
+		ldconfig
+	fi
+
+	# run nvidia-xconfig
+	/usr/bin/nvidia-xconfig -s --no-logo --no-composite --no-dynamic-twinview --force-generate
+
+	# Disable scaling to make sure the gpu does not loose performance
+	sed -i -e 's%Section \"Screen\"%&\n    Option      \"FlatPanelProperties\" \"Scaling = Native\"\n    Option      \"HWCursor\" \"Off\"%' /etc/X11/xorg.conf
+fi
+
+if [ "$GPUTYPE" = "AMD" ]; then
+	# Try fglrx first
+	if [ $LSBRELEASE -gt 910 ]; then
+		# only on lucid!
+		update-alternatives --set gl_conf /usr/lib/fglrx/ld.so.conf
+		ldconfig
+	fi
+
+	# run aticonfig
+	/usr/lib/fglrx/bin/aticonfig --initial --sync-vsync=on -f
+	ATICONFIG_RETURN_CODE=$? 
+
+	if [ $ATICONFIG_RETURN_CODE -eq 255 ]; then
+		# aticonfig returns 255 on old unsuported ATI cards 
+		# Let the X default ati driver handle the card 
+		if [ $LSBRELEASE -gt 910 ]; then
+			# only on lucid!
+			# revert to mesa
+			update-alternatives --set gl_conf /usr/lib/mesa/ld.so.conf
+			ldconfig
+		fi
+		modprobe radeon # Required to permit KMS switching and support hardware GL  
+	fi
+fi
+
+exit 0
Index: xbmc-11.0~git20111203.5325bbc/live-scripts/live.d/02-profileRedir.sh
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ xbmc-11.0~git20111203.5325bbc/live-scripts/live.d/02-profileRedir.sh	2011-12-03 16:18:03.693405665 +0100
@@ -0,0 +1,64 @@
+#!/bin/bash
+
+#      Copyright (C) 2005-2008 Team XBMC
+#      http://www.xbmc.org
+#
+#  This Program is free software; you can redistribute it and/or modify
+#  it under the terms of the GNU General Public License as published by
+#  the Free Software Foundation; either version 2, or (at your option)
+#  any later version.
+#
+#  This Program is distributed in the hope that it will be useful,
+#  but WITHOUT ANY WARRANTY; without even the implied warranty of
+#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+#  GNU General Public License for more details.
+#
+#  You should have received a copy of the GNU General Public License
+#  along with XBMC; see the file COPYING.  If not, write to
+#  the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
+#  http://www.gnu.org/copyleft/gpl.html
+
+#
+# Exiting if run on a live system only
+#
+if ! grep "boot=live" /proc/cmdline ; then
+	exit 0
+fi
+
+#
+# Exiting if booting from Live CD
+#
+if [ "$(mount | grep iso9660)" ]; then
+	exit 0
+fi
+
+kernelParams=$(cat /proc/cmdline)
+
+subString=${kernelParams##*xbmc=}
+xbmcParams=${subString%% *}
+
+activationToken="noredir"
+
+# if strings are NOT the same the token is part of the parameters list
+# here we want to stop script if the token is there
+if [ "$xbmcParams" != "${xbmcParams%$activationToken*}" ] ; then
+	exit 0
+fi
+
+BOOTMEDIAMOUNTPOINT=$1
+
+if [ -n "$BOOTMEDIAMOUNTPOINT" ]; then
+	if [ ! -d $BOOTMEDIAMOUNTPOINT/dotXBMC ]; then
+		mkdir $BOOTMEDIAMOUNTPOINT/dotXBMC
+	fi
+	if [ -d /home/xbmc/.xbmc ]; then
+		if [ -L /home/xbmc/.xbmc ]; then
+			rm /home/xbmc/.xbmc
+		else
+			mv /home/xbmc/.xbmc /home/xbmc/.xbmc.previous
+		fi
+	fi
+	ln -s $BOOTMEDIAMOUNTPOINT/dotXBMC /home/xbmc/.xbmc
+fi
+
+exit 0
Index: xbmc-11.0~git20111203.5325bbc/live-scripts/live.d/03-configNVIDIAHDMI.sh
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ xbmc-11.0~git20111203.5325bbc/live-scripts/live.d/03-configNVIDIAHDMI.sh	2011-12-03 16:18:03.693405665 +0100
@@ -0,0 +1,96 @@
+#!/bin/bash
+
+#      Copyright (C) 2005-2008 Team XBMC
+#      http://www.xbmc.org
+#
+#  This Program is free software; you can redistribute it and/or modify
+#  it under the terms of the GNU General Public License as published by
+#  the Free Software Foundation; either version 2, or (at your option)
+#  any later version.
+#
+#  This Program is distributed in the hope that it will be useful,
+#  but WITHOUT ANY WARRANTY; without even the implied warranty of
+#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+#  GNU General Public License for more details.
+#
+#  You should have received a copy of the GNU General Public License
+#  along with XBMC; see the file COPYING.  If not, write to
+#  the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
+#  http://www.gnu.org/copyleft/gpl.html
+
+#
+# Nvidia ION detection
+#
+
+NvidiaHDMIFirstGen=$(lspci -nn | grep '0403' | grep '10de:0ac0') #MCP79 High Definition Audio
+NvidiaHDMISecondGen=$(lspci -nn | grep '0403' | grep '10de:0be3') #MCP79 High Definition Audio
+
+if [ ! -n "$NvidiaHDMISecondGen" ] && [ ! -n "$NvidiaHDMIFirstGen" ] ; then
+	exit 0
+fi
+
+#
+# Set Nvidia HDMI variables
+#
+
+HDMICARD=$(aplay -l | grep 'NVIDIA HDMI' -m1 | awk -F: '{ print $1 }' | awk '{ print $2 }')
+HDMIDEVICE=$(aplay -l | grep 'NVIDIA HDMI' -m1 | awk -F: '{ print $2 }' | awk '{ print $5 }')
+
+#
+# Bails out if we don't have digital outputs
+#
+if [ -z $HDMICARD ] || [ -z $HDMIDEVICE ]; then
+	exit 0
+fi
+
+#
+# Restart only if needed
+#
+restartALSA=""
+
+#
+# Setup kernel module parameters
+#
+
+if [ -n "$NvidiaHDMISecondGen" ] ; then
+	if ! grep -i -q snd-hda-intel /etc/modprobe.d/alsa-base.conf ; then
+		if [ $HDMICARD,$HDMIDEVICE == 1,3 ]; then
+			echo 'options snd-hda-intel enable_msi=0 probe_mask=0xffff,0xfff2' >> /etc/modprobe.d/alsa-base.conf
+			restartALSA="1"
+                elif [ $HDMICARD,$HDMIDEVICE == 0,3 ]; then
+			echo 'options snd-hda-intel enable_msi=0 probe_mask=0xfff2' >> /etc/modprobe.d/alsa-base.conf
+			restartALSA="1"
+                elif [ $HDMICARD,$HDMIDEVICE == 2,3 ]; then
+			echo 'options snd-hda-intel enable_msi=0 probe_mask=0xffff,0xffff,0xfff2' >> /etc/modprobe.d/alsa-base.conf
+			restartALSA="1"
+		fi
+	fi
+fi
+
+if [ -n "$restartALSA" ] ; then
+	#
+	# Restart Alsa
+	#
+
+	alsa-utils stop &> /dev/null
+	alsa force-reload &> /dev/null
+	alsa-utils start &> /dev/null
+
+	#
+	# Unmute digital output
+	#
+
+	/usr/bin/amixer -q -c 0 sset 'IEC958 Default PCM',0 unmute &> /dev/null
+	/usr/bin/amixer -q -c 0 sset 'IEC958',0 unmute &> /dev/null
+	/usr/bin/amixer -q -c 0 sset 'IEC958',1 unmute &> /dev/null
+	/usr/bin/amixer -c 1 sset 'IEC958' unmute &> /dev/null
+
+	#
+	# Store alsa settings
+	#
+
+	alsactl store &> /dev/null
+fi
+
+exit 0
+
Index: xbmc-11.0~git20111203.5325bbc/live-scripts/live.d/04-configNVIDIAasoundrc.sh
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ xbmc-11.0~git20111203.5325bbc/live-scripts/live.d/04-configNVIDIAasoundrc.sh	2011-12-03 16:18:03.693405665 +0100
@@ -0,0 +1,217 @@
+#!/bin/bash
+
+#      Copyright (C) 2005-2008 Team XBMC
+#      http://www.xbmc.org
+#
+#  This Program is free software; you can redistribute it and/or modify
+#  it under the terms of the GNU General Public License as published by
+#  the Free Software Foundation; either version 2, or (at your option)
+#  any later version.
+#
+#  This Program is distributed in the hope that it will be useful,
+#  but WITHOUT ANY WARRANTY; without even the implied warranty of
+#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+#  GNU General Public License for more details.
+#
+#  You should have received a copy of the GNU General Public License
+#  along with XBMC; see the file COPYING.  If not, write to
+#  the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
+#  http://www.gnu.org/copyleft/gpl.html
+
+#
+# Nvidia ION detection
+#
+
+NvidiaHDMIFirstGen=$(lspci -nn | grep '0403' | grep '10de:0ac0') #MCP79 High Definition Audio
+NvidiaHDMISecondGen=$(lspci -nn | grep '0403' | grep '10de:0be3') #MCP79 High Definition Audio
+
+if [ ! -n "$NvidiaHDMISecondGen" ] && [ ! -n "$NvidiaHDMIFirstGen" ] ; then
+	exit 0
+fi
+
+
+kernelParams=$(cat /proc/cmdline)
+subString=${kernelParams##*xbmc=}
+xbmcParams=${subString%% *}
+
+activationToken="noalsaconfig"
+
+# if strings are NOT the same the token is part of the parameters list
+# here we want to stop script if the token is there
+if [ "$xbmcParams" != "${xbmcParams%$activationToken*}" ] ; then
+	exit 0
+fi
+
+#
+# Set Nvidia HDMI variables
+#
+
+HDMICARD=$(aplay -l | grep 'NVIDIA HDMI' -m1 | awk -F: '{ print $1 }' | awk '{ print $2 }')
+HDMIDEVICE=$(aplay -l | grep 'NVIDIA HDMI' -m1 | awk -F: '{ print $2 }' | awk '{ print $5 }')
+
+if [ -n "$NvidiaHDMIFirstGen" ] ; then
+	# "VT1708S Digital"
+	# "ALC662 rev1 Digital"
+	# "ALC1200 Digital"
+	# "ALC662 Digital"
+	# "ALC889A Digital"
+	# "ALC888 Digital" 
+	# "ALC887 Digital"
+	DIGITALCONTROL="VT1708S Digital\|ALC662 rev1 Digital\|ALC1200 Digital\|ALC662 Digital\|ALC889A Digital\|ALC888 Digital\|ALC887 Digital"
+fi
+
+if [ -n "$NvidiaHDMISecondGen" ] ; then
+	# "ALC887 Digital"
+	# "ALC888 Digital"
+	# "ALC880 Digital"
+	DIGITALCONTROL="ALC888 Digital\|ALC887 Digital\|ALC880 Digital"
+fi
+
+#
+# Retrieve Digital Settings before .asoundrc creation
+#
+
+DIGITALCARD=$(aplay -l | grep "$DIGITALCONTROL" | awk -F: '{ print $1 }' | awk '{ print $2 }')
+DIGITALDEVICE=$(aplay -l | grep "$DIGITALCONTROL" | awk -F: '{ print $2 }' | awk '{ print $5 }')
+
+ANALOGCARD=$(aplay -l | grep 'Analog' -m1 | awk -F: '{ print $1 }' | awk '{ print $2 }')
+ANALOGDEVICE=$(aplay -l | grep 'Analog' -m1 | awk -F: '{ print $2 }' | awk '{ print $5 }')
+
+#
+# Bails out if we don't have digital outputs
+#
+if [ -z $HDMICARD ] || [ -z $HDMIDEVICE ] || [ -z $DIGITALCARD ] || [ -z $DIGITALDEVICE ]; then
+	exit 0
+fi
+
+#
+# Setup .asoundrc
+#
+xbmcUser=xbmc
+# Read configuration variable file if it is present
+[ -r /etc/default/xbmc-live ] && . /etc/default/xbmc-live
+if ! getent passwd $xbmcUser >/dev/null; then
+	xbmcUser=$(getent passwd 1000 | sed -e 's/\:.*//')
+fi
+
+if [ ! -f /home/$xbmcUser/.asoundrc ] ; then
+	cat > /home/$xbmcUser/.asoundrc << 'EOF'
+
+pcm.both {
+        type route
+        slave {
+                pcm multi
+                channels 6
+        }
+        ttable.0.0 1.0
+        ttable.1.1 1.0
+        ttable.0.2 1.0
+        ttable.1.3 1.0
+        ttable.0.4 1.0
+        ttable.1.5 1.0
+}
+
+pcm.multi {
+        type multi
+        slaves.a {
+                pcm "hdmi_hw"
+                channels 2
+        }
+        slaves.b {
+                pcm "digital_hw"
+                channels 2
+        }
+        slaves.c {
+                pcm "analog_hw"
+                channels 2
+        }
+        bindings.0.slave a
+        bindings.0.channel 0
+        bindings.1.slave a
+        bindings.1.channel 1
+        bindings.2.slave b
+        bindings.2.channel 0
+        bindings.3.slave b
+        bindings.3.channel 1
+        bindings.4.slave c
+        bindings.4.channel 0
+        bindings.5.slave c
+        bindings.5.channel 1
+}
+
+pcm.hdmi_hw {
+        type hw
+        =HDMICARD=
+        =HDMIDEVICE=
+        channels 2
+}
+
+pcm.hdmi_formatted {
+        type plug
+        slave {
+                pcm hdmi_hw
+                rate 48000
+                channels 2
+        }
+}
+
+pcm.hdmi_complete {
+        type softvol
+        slave.pcm hdmi_formatted
+        control.name hdmi_volume
+        control.=HDMICARD=
+}
+
+pcm.digital_hw {
+        type hw
+        =DIGITALCARD=
+        =DIGITALDEVICE=
+        channels 2
+}
+
+pcm.analog_hw {
+        type hw
+        =ANALOGCARD=
+        =ANALOGDEVICE=
+        channels 2
+}
+EOF
+
+	sed -i "s/=HDMICARD=/card $HDMICARD/g" /home/$xbmcUser/.asoundrc
+	sed -i "s/=HDMIDEVICE=/device $HDMIDEVICE/g" /home/$xbmcUser/.asoundrc
+
+	sed -i "s/=DIGITALCARD=/card $DIGITALCARD/g" /home/$xbmcUser/.asoundrc
+	sed -i "s/=DIGITALDEVICE=/device $DIGITALDEVICE/g" /home/$xbmcUser/.asoundrc
+
+	sed -i "s/=ANALOGCARD=/card $ANALOGCARD/g" /home/$xbmcUser/.asoundrc
+	sed -i "s/=ANALOGDEVICE=/device $ANALOGDEVICE/g" /home/$xbmcUser/.asoundrc
+
+	chown $xbmcUser:$xbmcUser /home/$xbmcUser/.asoundrc
+
+	#
+	# Setup Triple Audiooutput
+	#
+	if [ ! -f /home/$xbmcUser/.xbmc/userdata/guisettings.xml ] ; then
+		mkdir -p /home/$xbmcUser/.xbmc/userdata &> /dev/null
+		cat > /home/$xbmcUser/.xbmc/userdata/guisettings.xml << 'EOF'
+<settings>
+    <audiooutput>
+	<audiodevice>custom</audiodevice>
+	<channellayout>0</channellayout>
+	<customdevice>plug:both</customdevice>
+	<mode>2</mode>
+	<passthroughdevice>alsa:hdmi</passthroughdevice>
+    </audiooutput>
+</settings>
+EOF
+		chown -R $xbmcUser:$xbmcUser /home/$xbmcUser/.xbmc
+	else
+		sed -i 's#\(<audiodevice>\)[0-9]*\(</audiodevice>\)#\1'custom'\2#g' /home/$xbmcUser/.xbmc/userdata/guisettings.xml
+		sed -i 's#\(<channellayout>\)[0-9]*\(</channellayout>\)#\1'0'\2#g' /home/$xbmcUser/.xbmc/userdata/guisettings.xml
+		sed -i 's#\(<customdevice>\)[0-9]*\(</customdevice>\)#\1'plug:both'\2#g' /home/$xbmcUser/.xbmc/userdata/guisettings.xml
+		sed -i 's#\(<mode>\)[0-9]*\(</mode>\)#\1'2'\2#g' /home/$xbmcUser/.xbmc/userdata/guisettings.xml
+		sed -i 's#\(<passthroughdevice>\)[0-9]*\(</passthroughdevice>\)#\1'alsa:hdmi'\2#g' /home/$xbmcUser/.xbmc/userdata/guisettings.xml
+	fi
+fi
+
+exit 0
Index: xbmc-11.0~git20111203.5325bbc/live-scripts/live.d/05-configAMDFusionasoundrc.sh
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ xbmc-11.0~git20111203.5325bbc/live-scripts/live.d/05-configAMDFusionasoundrc.sh	2011-12-03 16:18:03.693405665 +0100
@@ -0,0 +1,202 @@
+#!/bin/bash
+
+#      Copyright (C) 2005-2008 Team XBMC
+#      http://www.xbmc.org
+#
+#  This Program is free software; you can redistribute it and/or modify
+#  it under the terms of the GNU General Public License as published by
+#  the Free Software Foundation; either version 2, or (at your option)
+#  any later version.
+#
+#  This Program is distributed in the hope that it will be useful,
+#  but WITHOUT ANY WARRANTY; without even the implied warranty of
+#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+#  GNU General Public License for more details.
+#
+#  You should have received a copy of the GNU General Public License
+#  along with XBMC; see the file COPYING.  If not, write to
+#  the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
+#  http://www.gnu.org/copyleft/gpl.html
+
+#
+# AMD Fusion (E-350) detection
+#
+
+AMDFusion=$(lspci -nn | grep '0403' | grep '1002:4383') # ATI Technologies Inc SBx00 Azalia
+
+if [ ! -n "$AMDFusion" ] ; then
+	exit 0
+fi
+
+kernelParams=$(cat /proc/cmdline)
+subString=${kernelParams##*xbmc=}
+xbmcParams=${subString%% *}
+
+activationToken="noalsaconfig"
+
+# if strings are NOT the same the token is part of the parameters list
+# here we want to stop script if the token is there
+if [ "$xbmcParams" != "${xbmcParams%$activationToken*}" ] ; then
+	exit 0
+fi
+
+#
+# Set AMD Fusion HDMI variables
+#
+
+HDMICARD=$(aplay -l | grep 'HDMI' -m1 | awk -F: '{ print $1 }' | awk '{ print $2 }')
+HDMIDEVICE=$(aplay -l | grep 'HDMI' -m1 | awk -F: '{ print $2 }' | awk '{ print $5 }')
+
+if [ -n "$AMDFusion" ] ; then
+	# "ALC892 Digital"
+	DIGITALCONTROL="ALC892 Digital"
+fi
+
+#
+# Retrieve Digital Settings before .asoundrc creation
+#
+
+DIGITALCARD=$(aplay -l | grep "$DIGITALCONTROL" | awk -F: '{ print $1 }' | awk '{ print $2 }')
+DIGITALDEVICE=$(aplay -l | grep "$DIGITALCONTROL" | awk -F: '{ print $2 }' | awk '{ print $5 }')
+
+ANALOGCARD=$(aplay -l | grep 'Analog' -m1 | awk -F: '{ print $1 }' | awk '{ print $2 }')
+ANALOGDEVICE=$(aplay -l | grep 'Analog' -m1 | awk -F: '{ print $2 }' | awk '{ print $5 }')
+
+#
+# Bails out if we don't have digital outputs
+#
+if [ -z $HDMICARD ] || [ -z $HDMIDEVICE ] || [ -z $DIGITALCARD ] || [ -z $DIGITALDEVICE ]; then
+	exit 0
+fi
+
+#
+# Setup .asoundrc
+#
+xbmcUser=xbmc
+# Read configuration variable file if it is present
+[ -r /etc/default/xbmc-live ] && . /etc/default/xbmc-live
+if ! getent passwd $xbmcUser >/dev/null; then
+	xbmcUser=$(getent passwd 1000 | sed -e 's/\:.*//')
+fi
+
+if [ ! -f /home/$xbmcUser/.asoundrc ] ; then
+	cat > /home/$xbmcUser/.asoundrc << 'EOF'
+
+pcm.both {
+        type route
+        slave {
+                pcm multi
+                channels 6
+        }
+        ttable.0.0 1.0
+        ttable.1.1 1.0
+        ttable.0.2 1.0
+        ttable.1.3 1.0
+        ttable.0.4 1.0
+        ttable.1.5 1.0
+}
+
+pcm.multi {
+        type multi
+        slaves.a {
+                pcm "hdmi_hw"
+                channels 2
+        }
+        slaves.b {
+                pcm "digital_hw"
+                channels 2
+        }
+        slaves.c {
+                pcm "analog_hw"
+                channels 2
+        }
+        bindings.0.slave a
+        bindings.0.channel 0
+        bindings.1.slave a
+        bindings.1.channel 1
+        bindings.2.slave b
+        bindings.2.channel 0
+        bindings.3.slave b
+        bindings.3.channel 1
+        bindings.4.slave c
+        bindings.4.channel 0
+        bindings.5.slave c
+        bindings.5.channel 1
+}
+
+pcm.hdmi_hw {
+        type hw
+        =HDMICARD=
+        =HDMIDEVICE=
+        channels 2
+}
+
+pcm.hdmi_formatted {
+        type plug
+        slave {
+                pcm hdmi_hw
+                rate 48000
+                channels 2
+        }
+}
+
+pcm.hdmi_complete {
+        type softvol
+        slave.pcm hdmi_formatted
+        control.name hdmi_volume
+        control.=HDMICARD=
+}
+
+pcm.digital_hw {
+        type hw
+        =DIGITALCARD=
+        =DIGITALDEVICE=
+        channels 2
+}
+
+pcm.analog_hw {
+        type hw
+        =ANALOGCARD=
+        =ANALOGDEVICE=
+        channels 2
+}
+EOF
+
+	sed -i "s/=HDMICARD=/card $HDMICARD/g" /home/$xbmcUser/.asoundrc
+	sed -i "s/=HDMIDEVICE=/device $HDMIDEVICE/g" /home/$xbmcUser/.asoundrc
+
+	sed -i "s/=DIGITALCARD=/card $DIGITALCARD/g" /home/$xbmcUser/.asoundrc
+	sed -i "s/=DIGITALDEVICE=/device $DIGITALDEVICE/g" /home/$xbmcUser/.asoundrc
+
+	sed -i "s/=ANALOGCARD=/card $ANALOGCARD/g" /home/$xbmcUser/.asoundrc
+	sed -i "s/=ANALOGDEVICE=/device $ANALOGDEVICE/g" /home/$xbmcUser/.asoundrc
+
+	chown $xbmcUser:$xbmcUser /home/$xbmcUser/.asoundrc
+
+	#
+	# Setup Triple Audiooutput
+	#
+	if [ ! -f /home/$xbmcUser/.xbmc/userdata/guisettings.xml ] ; then
+		mkdir -p /home/$xbmcUser/.xbmc/userdata &> /dev/null
+		cat > /home/$xbmcUser/.xbmc/userdata/guisettings.xml << 'EOF'
+<settings>
+    <audiooutput>
+	<audiodevice>custom</audiodevice>
+	<channellayout>0</channellayout>
+	<customdevice>plug:both</customdevice>
+	<mode>2</mode>
+	<passthroughdevice>alsa:hdmi</passthroughdevice>
+    </audiooutput>
+</settings>
+EOF
+		chown -R $xbmcUser:$xbmcUser /home/$xbmcUser/.xbmc
+	else
+		sed -i 's#\(<audiodevice>\)[0-9]*\(</audiodevice>\)#\1'custom'\2#g' /home/$xbmcUser/.xbmc/userdata/guisettings.xml
+		sed -i 's#\(<channellayout>\)[0-9]*\(</channellayout>\)#\1'0'\2#g' /home/$xbmcUser/.xbmc/userdata/guisettings.xml
+		sed -i 's#\(<customdevice>\)[0-9]*\(</customdevice>\)#\1'plug:both'\2#g' /home/$xbmcUser/.xbmc/userdata/guisettings.xml
+		sed -i 's#\(<mode>\)[0-9]*\(</mode>\)#\1'2'\2#g' /home/$xbmcUser/.xbmc/userdata/guisettings.xml
+		sed -i 's#\(<passthroughdevice>\)[0-9]*\(</passthroughdevice>\)#\1'alsa:hdmi'\2#g' /home/$xbmcUser/.xbmc/userdata/guisettings.xml
+	fi
+fi
+
+exit 0
Index: xbmc-11.0~git20111203.5325bbc/live-scripts/live.d/10-setVolumes.sh
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ xbmc-11.0~git20111203.5325bbc/live-scripts/live.d/10-setVolumes.sh	2011-12-03 16:18:03.693405665 +0100
@@ -0,0 +1,36 @@
+#!/bin/bash
+
+#      Copyright (C) 2005-2008 Team XBMC
+#      http://www.xbmc.org
+#
+#  This Program is free software; you can redistribute it and/or modify
+#  it under the terms of the GNU General Public License as published by
+#  the Free Software Foundation; either version 2, or (at your option)
+#  any later version.
+#
+#  This Program is distributed in the hope that it will be useful,
+#  but WITHOUT ANY WARRANTY; without even the implied warranty of
+#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+#  GNU General Public License for more details.
+#
+#  You should have received a copy of the GNU General Public License
+#  along with XBMC; see the file COPYING.  If not, write to
+#  the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
+#  http://www.gnu.org/copyleft/gpl.html
+
+kernelParams=$(cat /proc/cmdline)
+
+subString=${kernelParams##*xbmc=}
+xbmcParams=${subString%% *}
+
+activationToken="setvolume"
+
+# if strings are the same the token is NOT part of the parameters list
+# here we want to stop script if the token is NOT there
+if [ "$xbmcParams" = "${xbmcParams%$activationToken*}" ] ; then
+	exit 0
+fi
+
+/usr/bin/setAlsaVolumes 90
+
+exit 0
Index: xbmc-11.0~git20111203.5325bbc/live-scripts/live.d/11-mountDisks.sh
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ xbmc-11.0~git20111203.5325bbc/live-scripts/live.d/11-mountDisks.sh	2011-12-03 16:18:03.693405665 +0100
@@ -0,0 +1,36 @@
+#!/bin/bash
+
+#      Copyright (C) 2005-2008 Team XBMC
+#      http://www.xbmc.org
+#
+#  This Program is free software; you can redistribute it and/or modify
+#  it under the terms of the GNU General Public License as published by
+#  the Free Software Foundation; either version 2, or (at your option)
+#  any later version.
+#
+#  This Program is distributed in the hope that it will be useful,
+#  but WITHOUT ANY WARRANTY; without even the implied warranty of
+#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+#  GNU General Public License for more details.
+#
+#  You should have received a copy of the GNU General Public License
+#  along with XBMC; see the file COPYING.  If not, write to
+#  the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
+#  http://www.gnu.org/copyleft/gpl.html
+
+kernelParams=$(cat /proc/cmdline)
+
+subString=${kernelParams##*xbmc=}
+xbmcParams=${subString%% *}
+
+activationToken="nodiskmount"
+
+# if strings are the same the token is NOT part of the parameters list
+# here we want to stop script if the token is there
+if [ "$xbmcParams" != "${xbmcParams%$activationToken*}" ] ; then
+	exit 0
+fi
+
+/usr/bin/diskmounter
+
+exit 0
Index: xbmc-11.0~git20111203.5325bbc/live-scripts/live.d/12-setupWakeFromUSB.sh
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ xbmc-11.0~git20111203.5325bbc/live-scripts/live.d/12-setupWakeFromUSB.sh	2011-12-03 16:18:03.693405665 +0100
@@ -0,0 +1,99 @@
+#!/bin/bash
+
+#      Copyright (C) 2005-2008 Team XBMC
+#      http://www.xbmc.org
+#
+#  This Program is free software; you can redistribute it and/or modify
+#  it under the terms of the GNU General Public License as published by
+#  the Free Software Foundation; either version 2, or (at your option)
+#  any later version.
+#
+#  This Program is distributed in the hope that it will be useful,
+#  but WITHOUT ANY WARRANTY; without even the implied warranty of
+#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+#  GNU General Public License for more details.
+#
+#  You should have received a copy of the GNU General Public License
+#  along with XBMC; see the file COPYING.  If not, write to
+#  the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
+#  http://www.gnu.org/copyleft/gpl.html
+
+findUSBPort() {
+	local FD=7
+	local tmpFile=$(mktemp)
+	local eof=0
+	local line
+	local usbPort=""
+	local pciDevice=""
+	local inBlock="0"
+	local token=$1
+
+	lshal > $tmpFile
+
+	# Open files.
+	eval exec "$FD<$tmpFile"
+
+	while [ $eof -eq 0 ]
+	do
+		if read line <&$FD; then
+			if [ -n "$(echo $line | grep -i $token)" ]; then
+				if [ "$inBlock" = "0" ]; then
+					inBlock="1"
+					token="linux.sysfs_path"
+				else
+					pciDevice=$(echo $line | awk -F/ '{ print $5}')
+					eof=1
+				fi
+			fi
+		else
+			eof=1
+		fi
+	done
+
+	if [ -n "$pciDevice" ] ; then
+		usbPort=$(cat /proc/acpi/wakeup | grep $pciDevice | awk '{ print $1}')
+	fi
+
+	echo $usbPort
+}
+
+
+kernelParams=$(cat /proc/cmdline)
+
+subString=${kernelParams##*xbmc=}
+xbmcParams=${subString%% *}
+
+activationToken="wakeOnUSBRemote"
+
+# if strings are the same the token is NOT part of the parameters list
+# here we want to stop script if the token is NOT there
+if [ "$xbmcParams" = "${xbmcParams%$activationToken*}" ] ; then
+	exit
+fi
+
+lircDriver=$(dmesg | grep usbcore | grep -i 'lirc' | sed -e "s/.* \(lirc*\)/\1/" | head -n 1)
+if [ ! -n "$lircDriver" ] ; then
+	# No lirc driver loaded
+	exit 0
+fi
+
+# Wait for udevtrigger to settle down (if any)
+udevTriggerPID=$(ps x | grep udevtrigger | grep -v grep | cut -f2 -d ' ')
+if [ -n "udevTriggerPID" }; then
+	while test -d /proc/$udevTriggerPID; do sleep 1; done;
+fi
+
+usbPort=$(findUSBPort "${lircDriver}")
+
+if [ -z "$usbPort" ]; then
+	# No USB Remote found
+	exit 0
+fi
+
+usbStatus=`cat /proc/acpi/wakeup | grep $usbPort | awk {'print $3}'`
+if [ "$usbStatus" = "disabled" ]; then
+	echo $usbPort > /proc/acpi/wakeup
+	echo -1 >/sys/module/usbcore/parameters/autosuspend
+fi
+
+exit 0
Index: xbmc-11.0~git20111203.5325bbc/live-scripts/live.d/13-disableXBMCIPv6.sh
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ xbmc-11.0~git20111203.5325bbc/live-scripts/live.d/13-disableXBMCIPv6.sh	2011-12-03 16:18:03.693405665 +0100
@@ -0,0 +1,61 @@
+#!/bin/bash
+
+#      Copyright (C) 2005-2008 Team XBMC
+#      http://www.xbmc.org
+#
+#  This Program is free software; you can redistribute it and/or modify
+#  it under the terms of the GNU General Public License as published by
+#  the Free Software Foundation; either version 2, or (at your option)
+#  any later version.
+#
+#  This Program is distributed in the hope that it will be useful,
+#  but WITHOUT ANY WARRANTY; without even the implied warranty of
+#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+#  GNU General Public License for more details.
+#
+#  You should have received a copy of the GNU General Public License
+#  along with XBMC; see the file COPYING.  If not, write to
+#  the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
+#  http://www.gnu.org/copyleft/gpl.html
+
+kernelParams=$(cat /proc/cmdline)
+
+subString=${kernelParams##*xbmc=}
+xbmcParams=${subString%% *}
+
+activationToken="doNotDisableIPv6InXBMC"
+
+# if strings are the same the token is NOT part of the parameters list
+# here we want to stop script if the token is NOT there
+if [ "$xbmcParams" != "${xbmcParams%$activationToken*}" ] ; then
+	exit
+fi
+
+xbmcUser=xbmc
+# Read configuration variable file if it is present
+[ -r /etc/default/xbmc-live ] && . /etc/default/xbmc-live
+if ! getent passwd $xbmcUser >/dev/null; then
+	xbmcUser=$(getent passwd 1000 | sed -e 's/\:.*//')
+fi
+
+if [ ! -f /home/$xbmcUser/.xbmc/userdata/advancedsettings.xml ] ; then
+	mkdir -p /home/$xbmcUser/.xbmc/userdata &> /dev/null
+	cat > /home/$xbmcUser/.xbmc/userdata/advancedsettings.xml << 'EOF'
+<advancedsettings>
+  <network>
+    <disableipv6>true</disableipv6>
+  </network>
+</advancedsettings>
+EOF
+	chown -R $xbmcUser:$xbmcUser /home/$xbmcUser/.xbmc
+else
+	if ! grep -i -q disableipv6 /home/$xbmcUser/.xbmc/userdata/advancedsettings.xml ; then
+		if grep -i -q "<network>" /home/$xbmcUser/.xbmc/userdata/advancedsettings.xml ; then
+			sed -i -e 's%<network>%&\n<disableipv6>true</disableipv6>%' /home/$xbmcUser/.xbmc/userdata/advancedsettings.xml
+		else
+			sed -i -e 's%<advancedsettings>%&\n<network>\n<disableipv6>true</disableipv6>\n</network>%' /home/$xbmcUser/.xbmc/userdata/advancedsettings.xml
+		fi
+	fi
+fi
+
+exit 0
Index: xbmc-11.0~git20111203.5325bbc/live-scripts/runXBMC
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ xbmc-11.0~git20111203.5325bbc/live-scripts/runXBMC	2011-12-03 16:18:03.693405665 +0100
@@ -0,0 +1,83 @@
+#!/bin/bash
+
+#      Copyright (C) 2005-2008 Team XBMC
+#      http://www.xbmc.org
+#
+#  This Program is free software; you can redistribute it and/or modify
+#  it under the terms of the GNU General Public License as published by
+#  the Free Software Foundation; either version 2, or (at your option)
+#  any later version.
+#
+#  This Program is distributed in the hope that it will be useful,
+#  but WITHOUT ANY WARRANTY; without even the implied warranty of
+#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+#  GNU General Public License for more details.
+#
+#  You should have received a copy of the GNU General Public License
+#  along with XBMC; see the file COPYING.  If not, write to
+#  the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
+#  http://www.gnu.org/copyleft/gpl.html
+
+
+if [ "$(pidof xbmc.bin)" ] ; then
+	exit
+fi
+
+if [ "$(pidof X)" ] ; then
+	/usr/bin/xbmc --standalone
+	exit
+fi
+
+while true
+do
+	if [ "$(whoami)" == "root" ] ; then
+		xbmcUser=xbmc
+
+		# Read configuration variable file if it is present
+		[ -r /etc/default/xbmc-live ] && . /etc/default/xbmc-live
+
+		if ! getent passwd $xbmcUser >/dev/null; then
+			xbmcUser=$(getent passwd 1000 | sed -e 's/\:.*//')
+			if [ -z "$xbmcUser" ]; then
+				echo "User for XBMC not found, exiting..."
+				break
+			fi
+		fi
+	else
+		xbmcUser=$(whoami)
+	fi
+
+	echo "#!/bin/bash" >  /home/$xbmcUser/.xsession
+	echo "/usr/bin/xbmc --standalone" >>  /home/$xbmcUser/.xsession
+
+	echo "case \"\$?\" in" >>  /home/$xbmcUser/.xsession
+	echo "    0 ) # Quit" >>  /home/$xbmcUser/.xsession
+	echo "        touch /tmp/noRestartXBMC" >> /home/$xbmcUser/.xsession
+	echo "        break ;;"  >>  /home/$xbmcUser/.xsession
+	echo "    64 ) # Shutdown System"  >>  /home/$xbmcUser/.xsession
+	echo "        sleep 10 ;;"  >>  /home/$xbmcUser/.xsession
+	echo "    65 ) # Warm Reboot"  >>  /home/$xbmcUser/.xsession
+	echo "        echo "Restarting XBMC ..." ;;"  >>  /home/$xbmcUser/.xsession
+	echo "    66 ) # Reboot System"  >>  /home/$xbmcUser/.xsession
+	echo "        sleep 10 ;;"  >>  /home/$xbmcUser/.xsession
+	echo "     * ) ;;"  >>  /home/$xbmcUser/.xsession
+	echo "esac"  >>  /home/$xbmcUser/.xsession
+
+	chown $xbmcUser:$xbmcUser /home/$xbmcUser/.xsession
+
+	initctl emit starting-x
+
+	if [ "$(whoami)" == "root" ] ; then
+		su $xbmcUser -c "startx -- -br > /dev/null 2>&1"
+	else
+		startx -- -br > /dev/null 2>&1
+	fi
+
+	if [ -e /tmp/noRestartXBMC ] ; then
+		rm /tmp/noRestartXBMC
+		rm /home/$xbmcUser/.xsession
+		break
+	fi
+
+#	sleep 2
+done
